var documenterSearchIndex = {"docs":
[{"location":"manual/conventions/#Conventions","page":"Conventions","title":"Conventions","text":"","category":"section"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"In the Julia Astro ecosystem, images follow the following conventions.","category":"page"},{"location":"manual/conventions/#Axes","page":"Conventions","title":"Axes","text":"","category":"section"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"For simple 2D images, the first axis is the horizontal axis and the second axis is the vertical axis. So images are indexed by img[xi, yi].","category":"page"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"The origin is at the bottom left of the image, so img[1,1] refers to the bottom left corner as does img[begin,begin]. img[end,end] is the top right corner, img[begin,end] is the top left, etc.","category":"page"},{"location":"manual/conventions/#Pixel-Indices-specify-the-Centers-of-Pixels","page":"Conventions","title":"Pixel Indices specify the Centers of Pixels","text":"","category":"section"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"The exact location of img[1,1] is the center of the pixel in the bottom left corner. This means that plot limits should have the 1 tick slightly away from the left/bottom spines of the image. The default plot limits for implot are -0.5 to end+0.5 along both axes. ","category":"page"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"There is a known bug with the Plots.jl GR backend that leads ticks to be slightly offset. PyPlot and Plotly backends show the correct tick locations.","category":"page"},{"location":"basics/","page":"-","title":"-","text":"The AstroImages package provides a wrapper, AstroImage, that can wrap any AbstractArray. An AstroImage should behave like a plain array, but gains a few extra abilities.","category":"page"},{"location":"basics/","page":"-","title":"-","text":"First, AstroImages are automatically displayed when returned as results in many environements, including VSCode, Jupyter, Pluto, ImageShow, and ImageInTerminal","category":"page"},{"location":"manual/getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"To get started, you will first need to install AstroImages. After starting Julia, enter package-mode by typing ] and then","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add AstroImages","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"To display images and save them in traditional graphics formats like PNG, JPG, GIF, etc., you will also need to add the ImageIO package. Once installed, this package doesn't need to be loaded explicitly.","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"For some of the more advanced visualizations you may also want Plots:","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add Plots","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"To load the package, run:","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"using AstroImages\n# And if desired:\nusing Plots","category":"page"},{"location":"examples/basics/loading/#Loading-Images","page":"Loading Images","title":"Loading Images","text":"","category":"section"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"(Image: Source code) (Image: notebook) (Image: Author)","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"We'll start by downloading a sample image. If you have an image stored locally, you would skip this step.","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"using AstroImages\nfname = download(\n    \"http://www.astro.uvic.ca/~wthompson/astroimages/fits/656nmos.fits\",\n    \"eagle-656nmos.fits\"\n);\nnothing #hide","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"Load the image by filename. If unspecified, the image is loaded from the first image-HDU in the fits file.","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"img = AstroImage(\"eagle-656nmos.fits\")","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"manual/loading-images/#Loading-Images","page":"Loading & Saving Images","title":"Loading Images","text":"","category":"section"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"FITS (Flexible Image Transport System) files can be loaded and saved using AstroImages thanks to the FITSIO package.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"AstroImages is registered with FileIO, so if you have FileIO and AstroImages installed you can get started with the load function. When you pass a file name with the appropriate file extension (\".fits\", \".fit\", etc.) FileIO will import AstroImages automatically.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Alternatively, you can use the AstroImage contructor instead of load. This will work on fits files with any file extension, including compressed files (e.g. \".fits.gz\").","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = load(\"myfitsimg.fits\")\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled Base.OneTo(1600) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(1600) ForwardOrdered Regular Points\n 0.0  0.0  0.0  0.0  0.0  …  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n ⋮                        ⋱\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Note: if you are in an interactive environment like VSCode, Jupyter, or Pluto, instead of a REPL, AstroImages are automatically rendered to images and displayed. You can see this plain text output by explicitly calling: show(stdout, MIME(\"text/plain\"), img).","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Or:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":" julia> img = AstroImage(\"myfitsimg.fits.gz\")\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled Base.OneTo(1600) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(1600) ForwardOrdered Regular Points\n 0.0  0.0  0.0  0.0  0.0  …  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n ⋮                        ⋱\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"A FITS file can contain multiple N-dimensional images and tables. When you call load or AstroImage with a file name and no other arguments, the package will search through the file and return the first image HDU. That is, it will skip any FITS tables or empty HDUs with only headers.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can also specify an HDU number explicitly:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = load(\"myfitsimg.fits\",1)\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled Base.OneTo(1600) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(1600) ForwardOrdered Regular Points\n...","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"This way, you can load specific images from multi-extension files.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can load all HDUs simultaneously by passing ::","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> hdus = load(\"multiext.fits\", :);\njulia> hdus[2] # Second HDU as an AstroImage\n10×10 AstroImage{Float64,2} with dimensions:\n  X Sampled Base.OneTo(10) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(10) ForwardOrdered Regular Points\n -0.777315  -1.36683   -0.580179     1.39629      …  -2.14298     0.450059   0.432065\n -1.09619    0.789249   0.938415     0.959903        -0.88995    -1.29406   -0.4291\n  0.47427   -1.41855    0.814823    -1.15975          0.0427149  -1.20116   -0.0920709\n -0.179858  -1.60228    1.09648     -0.497927        -1.31824    -0.156529  -0.0223846\n  2.64162    0.131437   0.320476     0.331197        -0.914713   -1.55162   -0.18862\n  0.209669  -1.17923   -0.656512     0.000775311  …   0.377461   -0.24278    0.967202\n  1.01442   -0.762895  -2.13238     -0.456932        -0.415733   -1.21416   -1.6108\n  0.385626   0.389335  -0.00726015   0.309936        -0.533175    0.157878   0.100876\n -1.24799    0.461216  -0.868826    -0.255654        -0.37151     0.49479   -1.87129\n  1.39356    2.29254    0.0548325    1.50674         -0.0880865   0.580978  -1.81629\njulia> # Or:\njulia> hdu1, hdu2, hdu3 = load(\"multiext.fits\", :);","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"There is also limited support for table HDUs. In this case, a bare-bones Tables.jl compatible  object is returned.","category":"page"},{"location":"manual/loading-images/#Dimension-Names","page":"Loading & Saving Images","title":"Dimension Names","text":"","category":"section"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You may have noticed the entries above the image array:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"10×10 AstroImage{Float64,2} with dimensions:\n  X Sampled Base.OneTo(10) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(10) ForwardOrdered Regular Points","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"AstroImages are based on Dimensional Data. Each axis is assigned a dimension name and the indices are tracked. The automatic dimension names are X, Y, Z, Dim{4}, Dim{5}, and so on; however you can pass in other names or orders to the load function and/or AstroImage contructor:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = load(\"img.fits\",1,(Y=1:1600,Z=1:1600))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  Y Sampled 1:1600 ForwardOrdered Regular Points,\n  Z Sampled 1:1600 ForwardOrdered Regular Points","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Other useful dimension names are Spec for spectral axes, Pol for polarization data, and Ti for time axes.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"These will be further discussed in Dimensions and World Coordinates.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basics","page":"Examples","title":"Basics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td valign=\"bottom\"><div class=\"list-card-cover\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: list-card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"  </div></td>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Displaying Images","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We'll start by downloading a sample image. If you have an image stored locally, you would skip this step.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td valign=\"bottom\"><div class=\"list-card-cover\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: list-card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"  </div></td>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Loading Images","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Loading FITS images from files.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/basics/displaying/#Displaying-Images","page":"Displaying Images","title":"Displaying Images","text":"","category":"section"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"(Image: Source code) (Image: notebook) (Image: Author)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"We'll start by downloading a sample image. If you have an image stored locally, you would skip this step.","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"using AstroImages","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Any AbstractArray can be visualized with the imview function.","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"arr = randn(10,10)\nimview(arr)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Let's load an astronomical image to see how we can tweak its display","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"fname = download(\n    \"http://www.astro.uvic.ca/~wthompson/astroimages/fits/656nmos.fits\",\n    \"eagle-656nmos.fits\"\n);\nimg = AstroImage(\"eagle-656nmos.fits\");\nimview(img)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"We can adjust the color limits manually","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"imview(img, clims=(0,100))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Or provide a function to calculate them for us","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"imview(img, clims=extrema)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"AstroImages includes some handy callables, like Percent and Zscale.flags Percent sets the limits to include some central percentage of the data range For example, 95% sets the color limits to clip the top and bottom 2.5% of pixels. Percent(99.5) is the default value of clims.","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"imview(img, clims=Percent(95))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Arrays wrapped by AstroImage are displayed automatically using imview","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"AstroImage(randn(10,10))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"The settings for automatic imview are controlled using package defaults that can be adjusted to suit your tastes","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"AstroImages.set_clims!(Zscale()) # Display the full range automatically\nAstroImages.set_cmap!(:viridis)\nAstroImages.set_stretch!(asinhstretch)\nAstroImage(randn(10,10))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"load\nsave\nAstroImage\nimview\nimplot\ndims\nrefdims\nComment\nHistory\npix_to_world\nworld_to_pix\nX\nY\nZ\nDim\nAt\nNear\n..\nheader\nwcs\nWCSGrid\ncomposecolors\nZscale\nPercent\nlogstretch\npowstretch\nsqrtstretch\nsquarestretch\nasinhstretch\nsinhstretch\npowerdiststretch\ncopyheader\nshareheader","category":"page"},{"location":"api/#FileIO.load","page":"API","title":"FileIO.load","text":"load(filename) loads the contents of a formatted file, trying to infer the format from filename and/or magic bytes in the file (see query).\nload(strm) loads from an IOStream or similar object. In this case, there is no filename extension, so we rely on the magic bytes for format identification.\nload(File{format\"PNG\"}(filename)) specifies the format directly, and bypasses the format query.\nload(Stream{format\"PNG\"}(io)) specifies the format directly, and bypasses the format query.\nload(f; options...) passes keyword arguments on to the loader.\n\n\n\n\n\n","category":"function"},{"location":"api/#FileIO.save","page":"API","title":"FileIO.save","text":"save(filename, data...) saves the contents of a formatted file, trying to infer the format from filename.\nsave(Stream{format\"PNG\"}(io), data...) specifies the format directly, and bypasses the format query.\nsave(File{format\"PNG\"}(filename), data...) specifies the format directly, and bypasses the format query.\nsave(f, data...; options...) passes keyword arguments on to the saver.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.AstroImage","page":"API","title":"AstroImages.AstroImage","text":"Provides access to a FITS image along with its accompanying  header and WCS information, if applicable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.imview","page":"API","title":"AstroImages.imview","text":"imview(img; clims=Percent(99.5), stretch=identity, cmap=:magma, contrast=1.0, bias=0.5)\n\nCreate a read only view of an array or AstroImageMat mapping its data values to Colors according to clims, stretch, and cmap.\n\nThe data is first clamped to clims, which can either be a tuple of (min, max) values or a function accepting an iterator of pixel values that returns (min, max). By default, clims=extrema i.e. the minimum and maximum of img. Convenient functions to use for clims are: extrema, zscale, and percent(p)\n\nNext, the data is rescaled to [0,1] and remapped according to the function stretch. Stretch can be any monotonic fuction mapping values in the range [0,1] to some range [a,b]. Note that log(0) is not defined so is not directly supported. For a list of convenient stretch functions, see: logstretch, powstretch, squarestretch, asinhstretch, sinhstretch, powerdiststretch\n\nFinally the data is mapped to RGB values according to cmap. If cmap is nothing, grayscale is used. ColorSchemes.jl defines hundreds of colormaps. A few nice ones for images include: :viridis, :magma, :plasma, :thermal, and :turbo.\n\nCrucially, this function returns a view over the underlying data. If img is updated then those changes will be reflected by this view with the exception of clims which is not recalculated.\n\nNote: if clims or stretch is a function, the pixel values passed in are first filtered to remove non-finite or missing values.\n\nDefaults\n\nThe default values of clims, stretch, and cmap are extrema, identity, and nothing respectively. You may alter these defaults using AstroImages.set_clims!,  AstroImages.set_stretch!, and AstroImages.set_cmap!.\n\nAutomatic Display\n\nArrays wrapped by AstroImageMat() get displayed as images automatically by calling  imview on them with the default settings when using displays that support showing PNG images.\n\nMissing data\n\nPixels that are NaN or missing will be displayed as transparent when cmap is set or black if. +/- Inf will be displayed as black or white respectively.\n\nExporting Images\n\nThe view returned by imview can be saved using general FileIO.save methods. Example:\n\nv = imview(data, cmap=:magma, stretch=asinhstretch, clims=percent(95))\nsave(\"output.png\", v)\n\n\n\n\n\nimview(img::AbstractArray{<:Complex}; ...)\n\nWhen applied to an image with complex values, display the magnitude of the pixels using imview and display the phase angle as a panel below using a cyclical color map. For more customatization, you can create a view like this yourself:\n\nvcat(\n    imview(abs.(img)),\n    imview(angle.(img)),\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.implot","page":"API","title":"AstroImages.implot","text":"implot(\n    img::AbstractArray;\n    clims=Percent(99.5),\n    stretch=identity,\n    cmap=:magma,\n    bias=0.5,\n    contrast=1,\n    wcsticks=true,\n    grid=true,\n    platescale=1\n)\n\nCreate a read only view of an array or AstroImageMat mapping its data values to an array of Colors. Equivalent to:\n\nimplot(\n    imview(\n        img::AbstractArray;\n        clims=Percent(99.5),\n        stretch=identity,\n        cmap=:magma,\n        bias=0.5,\n        contrast=1,\n    ),\n    wcsn=1,\n    wcsticks=true,\n    wcstitle=true,\n    grid=true,\n    platescale=1\n)\n\nImage Rendering\n\nSee imview for how data is mapped to RGBA pixel values.\n\nWCS & Image Coordinates\n\nIf provided with an AstroImage that has WCS headers set, the tick marks and plot grid are calculated using WCS.jl. By default, use the first WCS coordinate system. The underlying pixel coordinates are those returned by dims(img) multiplied by platescale. This allows you to overplot lines, regions, etc. using pixel coordinates. If you wish to compute the pixel coordinate of a point in world coordinates, see world_to_pix.\n\nwcsn (default 1) select which WCS transform in the headers to use for ticks & grid\nwcsticks (default true if WCS headers present) display ticks and labels, and title using world coordinates\nwcstitle (default true if WCS headers present and length(refdims(img))>0). When slicing a cube, display the location along unseen axes in world coordinates instead of pixel coordinates.\ngrid (default true) show a grid over the plot. Uses WCS coordinates if wcsticks is true, otherwise pixel coordinates multiplied by platescale.\nplatescale (default 1). Scales the underlying pixel coordinates to ease overplotting, etc. If wcsticks is false, the displayed pixel coordinates are also scaled.\n\nDefaults\n\nThe default values of clims, stretch, and cmap are extrema, identity, and nothing respectively. You may alter these defaults using AstroImages.set_clims!,  AstroImages.set_stretch!, and AstroImages.set_cmap!.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.dims","page":"API","title":"DimensionalData.Dimensions.dims","text":"dims(x, [dims::Tuple]) => Tuple{Vararg{<:Dimension}}\ndims(x, dim) => Dimension\n\nReturn a tuple of Dimensions for an object, in the order that matches the axes or columns of the underlying data.\n\ndims can be Dimension, Dimension types, or Symbols for Dim{Symbol}.\n\nThe default is to return nothing.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.refdims","page":"API","title":"DimensionalData.Dimensions.refdims","text":"refdims(x, [dims::Tuple]) => Tuple{Vararg{<:Dimension}}\nrefdims(x, dim) => Dimension\n\nReference dimensions for an array that is a slice or view of another array with more dimensions.\n\nslicedims(a, dims) returns a tuple containing the current new dimensions and the new reference dimensions. Refdims can be stored in a field or disgarded, as it is mostly to give context to plots. Ignoring refdims will simply leave some captions empty.\n\nThe default is to return an empty Tuple ().\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.Comment","page":"API","title":"AstroImages.Comment","text":"Index for accessing a comment associated with a header keyword or COMMENT entry.\n\nExample:\n\nimg = AstroImage(randn(10,10))\nimg[\"ABC\"] = 1\nimg[\"ABC\", Comment] = \"A comment describing this key\"\n\npush!(img, Comment, \"The purpose of this file is to demonstrate comments\")\nimg[Comment] # [\"The purpose of this file is to demonstrate comments\")]\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.History","page":"API","title":"AstroImages.History","text":"Allows accessing and setting HISTORY header entries\n\nimg = AstroImage(randn(10,10)) push!(img, History, \"2023-04-19: Added history entry.\") img[History] # [\"2023-04-19: Added history entry.\"]\n\n\n\n\n\n","category":"type"},{"location":"api/#WCS.pix_to_world","page":"API","title":"WCS.pix_to_world","text":"pix_to_world(wcs, pixcoords)\n\nConvert the array of pixel coordinates pixcoords to world coordinates according to the WCSTransform wcs. pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same shape as pixcoords.\n\n\n\n\n\npix_to_world(img::AstroImage, pixcoords; all=false)\n\nGiven an astro image, look up the world coordinates of the pixels given  by pixcoords. World coordinates are resolved using WCS.jl and a WCSTransform calculated from any FITS header present in img. If no WCS information is in the header, or the axes are all linear, this will just return pixel coordinates.\n\npixcoords should be the coordinates in your current selection of the image. For example, if you select a slice like this:\n\njulia> cube = load(\"some-3d-cube.fits\")\njulia> slice = cube[10:20, 30:40, 5]\n\nThen to look up the coordinates of the pixel in the bottom left corner of slice, run:\n\njulia> world_coords = pix_to_world(img, [1, 1])\n[10, 30]\n\nIf WCS information was present in the header of cube, then those coordinates would be resolved using axis 1, 2, and 3 respectively.\n\nTo include world coordinates in all axes, pass all=true\n\njulia> world_coords = pix_to_world(img, [1, 1], all=true)\n[10, 30, 5]\n\n!! Coordinates must be provided in the order of dims(img). If you transpose  an image, the order you pass the coordinates should not change.\n\n\n\n\n\n","category":"function"},{"location":"api/#WCS.world_to_pix","page":"API","title":"WCS.world_to_pix","text":"world_to_pix(wcs, worldcoords)\n\nConvert the array of world coordinates worldcoords to pixel coordinates according to the WCSTransform wcs. worldcoords is a 2-d array where \"worldcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same size as worldcoords.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.X","page":"API","title":"DimensionalData.Dimensions.X","text":"X <: XDim\n\nX(val=:)\n\nX Dimension. X <: XDim <: IndependentDim\n\nExample:\n\nxdim = X(2:2:10)\n# Or\nval = A[X(1)]\n# Or\nmean(A; dims=X)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Y","page":"API","title":"DimensionalData.Dimensions.Y","text":"Y <: YDim\n\nY(val=:)\n\nY Dimension. Y <: YDim <: DependentDim\n\nExample:\n\nydim = Y(['a', 'b', 'c'])\n# Or\nval = A[Y(1)]\n# Or\nmean(A; dims=Y)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Z","page":"API","title":"DimensionalData.Dimensions.Z","text":"Z <: ZDim\n\nZ(val=:)\n\nZ Dimension. Z <: ZDim <: Dimension\n\nExample:\n\nzdim = Z(10:10:100)\n# Or\nval = A[Z(1)]\n# Or\nmean(A; dims=Z)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Dim","page":"API","title":"DimensionalData.Dimensions.Dim","text":"Dim{S}(val=:)\n\nA generic dimension. For use when custom dims are required when loading data from a file. Can be used as keyword arguments for indexing.\n\nDimension types take precedence over same named Dim types when indexing with symbols, or e.g. creating Tables.jl keys.\n\nusing DimensionalData\n\ndim = Dim{:custom}(['a', 'b', 'c'])\n\n# output\n\nDim{:custom} Char[a, b, c]\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.LookupArrays.At","page":"API","title":"DimensionalData.Dimensions.LookupArrays.At","text":"At <: Selector\n\nAt(x, atol, rtol)\nAt(x; atol=nothing, rtol=nothing)\n\nSelector that exactly matches the value on the passed-in dimensions, or throws an error. For ranges and arrays, every intermediate value must match an existing value - not just the end points.\n\nx can be any value or Vector of values.\n\natol and rtol are passed to isapprox. For Number rtol will be set to Base.rtoldefault, otherwise nothing, and wont be used.\n\nExample\n\nusing DimensionalData\n\nA = DimArray([1 2 3; 4 5 6], (X(10:10:20), Y(5:7)))\nA[X(At(20)), Y(At(6))]\n\n# output\n\n5\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.LookupArrays.Near","page":"API","title":"DimensionalData.Dimensions.LookupArrays.Near","text":"Near <: Selector\n\nNear(x)\n\nSelector that selects the nearest index to x.\n\nWith Points this is simply the index values nearest to the x, however with Intervals it is the interval center nearest to x. This will be offset from the index value for Start and End loci.\n\nExample\n\nusing DimensionalData\n\nA = DimArray([1 2 3; 4 5 6], (X(10:10:20), Y(5:7)))\nA[X(Near(23)), Y(Near(5.1))]\n\n# output\n4\n\n\n\n\n\n","category":"type"},{"location":"api/#IntervalSets.:..","page":"API","title":"IntervalSets.:..","text":"iv = l..r\n\nConstruct a ClosedInterval iv spanning the region from l to r.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.header","page":"API","title":"AstroImages.header","text":"header(img::AstroImage)\n\nReturn the underlying FITSIO.FITSHeader object wrapped by an AstroImage. Note that this object has less flexible getindex and setindex methods. Indexing by symbol, Comment, History, etc are not supported.\n\n\n\n\n\nheader(array::AbstractArray)\n\nReturns an empty FITSIO.FITSHeader object when called with a non-AstroImage abstract array.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.wcs","page":"API","title":"AstroImages.wcs","text":"wcs(img)\n\nComputes and returns a list of World Coordinate System WCSTransform objects from WCS.jl. The resultss are cached after the first call, so subsequent calls are fast. Modifying a WCS header invalidates this cache automatically, so users should call wcs(...) each time rather than keeping the WCSTransform object around.\n\n\n\n\n\nwcs(img, index)\n\nComputes and returns a World Coordinate System WCSTransform objects from WCS.jl by index. This is to support files with multiple WCS transforms specified. wcs(img,1) is useful for selecting selecting the first WCSTranform object. The resultss are cached after the first call, so subsequent calls are fast. Modifying a WCS header invalidates this cache automatically, so users should call wcs(...) each time rather than keeping the WCSTransform object around.\n\n\n\n\n\nwcs(array)\n\nReturns a list with a single basic WCSTransform object when called with a non-AstroImage abstract array.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.WCSGrid","page":"API","title":"AstroImages.WCSGrid","text":"WCSGrid(img::AstroImageMat, ax=(1,2), coords=(first(axes(img,ax[1])),first(axes(img,ax[2]))))\n\nGiven an AstroImageMat, return information necessary to plot WCS gridlines in physical coordinates against the image's pixel coordinates. This function has to work on both plotted axes at once to handle rotation and general curvature of the WCS grid projected on the image coordinates.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.composecolors","page":"API","title":"AstroImages.composecolors","text":"composecolors(\n    images,\n    cmap=[\"#F00\", \"#0F0\", \"#00F\"];\n    clims,\n    stretch,\n    contrast,\n    bias,\n    multiplier\n)\n\nCreate a color composite of multiple images by applying imview and blending  the results. This function can be used to create RGB composites using any number of channels (e.g. red, green, blue, and hydrogen alpha) as well as more exotic images like blending radio and optical data using two different colormaps.\n\ncmap should be a list of colorants, named colors (see Colors.jl), or colorschemes (see ColorSchemes.jl). clims, stretch, contrast, and bias are passed on to imview. They can be a single value or a list of different values for each image.\n\nExamples:\n\n# Basic RGB\ncomposecolors([redimage, greenimage, blueimage])\n# Non-linear stretch before blending\ncomposecolors([redimage, greenimage, blueimage], stretch=asinhstretch)\n# More than three channels are allowed (H alpha in pink)\ncomposecolors(\n    [antred, antgreen, antblue, anthalp],\n    [\"red\", \"green\", \"blue\", \"maroon1\"],\n    multiplier=[1,2,1,1]\n)\n# Can mix \ncomposecolors([radioimage, xrayimage], [:ice, :magma], clims=extrema)\ncomposecolors([radioimage, xrayimage], [:magma, :viridis], clims=[Percent(99), Zscale()])\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.Zscale","page":"API","title":"AstroImages.Zscale","text":"Zscale(options)(data)\n\nWraps PlotUtils.zscale in a callable with default parameters. This is a common algorithm for agressively stretching astronomical data to see faint structure that originated in IRAF: https://iraf.net/forum/viewtopic.php?showtopic=134139 but is now seen in many other applications/libraries (DS9, Astropy, etc.)\n\nUsage:\n\nimview(img, clims=Zscale())\nimplot(img, clims=Zscale(contrast=0.1))\n\nDefault parameters:\n\nnsamples::Int=1000\ncontrast::Float64=0.25\nmax_reject::Float64=0.5\nmin_npixels::Float64=5\nk_rej::Float64=2.5\nmax_iterations::Int=5\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.Percent","page":"API","title":"AstroImages.Percent","text":"Percent(99.5)\n\nReturns a callable that calculates display limits that include the given  percent of the image data. Reproduces the behaviour of the SAO DS9 scale menu.\n\nExample:\n\njulia> imview(img, clims=Percent(90))\n\nThis will set the limits to be the 5th percentile to the 95th percentile.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.logstretch","page":"API","title":"AstroImages.logstretch","text":"logstretch(num,a=1000)\n\nA log-stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.powstretch","page":"API","title":"AstroImages.powstretch","text":"powstretch(num, a=1000)\n\nA power-stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.sqrtstretch","page":"API","title":"AstroImages.sqrtstretch","text":"sqrtstretch(num)\n\nA square root stretch (simply defined as Base.sqrt)\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.squarestretch","page":"API","title":"AstroImages.squarestretch","text":"squarestretch(num)\n\nA squarestretch-stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.asinhstretch","page":"API","title":"AstroImages.asinhstretch","text":"asinhstretch(num)\n\nA hyperbolic arcsin stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.sinhstretch","page":"API","title":"AstroImages.sinhstretch","text":"sinhstretch(num)\n\nA hyperbolic sin stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.powerdiststretch","page":"API","title":"AstroImages.powerdiststretch","text":"logstretch(num,a=1000)\n\nA power distance stretch as defined by astropy.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.copyheader","page":"API","title":"AstroImages.copyheader","text":"copyheader(img::AstroImage, data) -> imgnew\n\nCreate a new image copying the header of img but using the data of the AbstractArray data. Note that changing the header of imgnew does not affect the header of img. See also: shareheader.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.shareheader","page":"API","title":"AstroImages.shareheader","text":"shareheader(img::AstroImage, data) -> imgnew\n\nCreate a new image reusing the header dictionary of img but using the data of the AbstractArray data. The two images have synchronized header; modifying one also affects the other. See also: copyheader.\n\n\n\n\n\n","category":"function"},{"location":"manual/dimensions-and-world-coordinates/#Dimensions-and-World-Coordinates","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"","category":"section"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"AstroImages are based on Dimensional Data. Each axis is assigned a dimension name and the indices are tracked. The automatic dimension names are X, Y, Z, Dim{4}, Dim{5}, and so on; however you can pass in other names or orders to the load function and/or AstroImage contructor:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img = load(\"img.fits\",1,(Y=1:1600,Z=1:1600))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  Y Sampled 1:1600 ForwardOrdered Regular Points,\n  Z Sampled 1:1600 ForwardOrdered Regular Points","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Other useful dimension names are Spec for spectral axes, Pol for polarization data, and Ti for time axes.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"These will be further discussed in Dimensions and World Coordinates.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"For certain applications, it may be useful to use offset axes or axes with different steps. ","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img = load(\"img.fits\",1,(X=801:2400,Y=1:2:3200))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled 801:2400 ForwardOrdered Regular Points,\n  Y Sampled 1:2:3199 ForwardOrdered Regular Points\n...","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Unlike OffsetArrays, the usual indexing remains so img[1,1] is still the bottom left of the image; however, data can be looked up according to the offset axes when using specifiers:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img[X=Near(2000),Y=1..100]\n50-element AstroImage{Float32,1} with dimensions:\n  Y Sampled 1:2:99 ForwardOrdered Regular Points\nand reference dimensions:\n  X Sampled 2000:2000 ForwardOrdered Regular Points\n  0.0","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AstroImages.jl is a Julia package for loading, manipulating, visualizing, and saving astronomical images.","category":"page"}]
}
