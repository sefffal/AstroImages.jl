var documenterSearchIndex = {"docs":
[{"location":"examples/basics/displaying/#Displaying-Images","page":"Displaying Images","title":"Displaying Images","text":"","category":"section"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"(Image: Source code) (Image: notebook) (Image: Author)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"We'll start by downloading a sample image. If you have an image stored locally, you would skip this step.","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"using AstroImages","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Any AbstractArray can be visualized with the imview function.","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"arr = randn(10,10)\nimview(arr)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Let's load an astronomical image to see how we can tweak its display","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"fname = download(\n    \"http://www.astro.uvic.ca/~wthompson/astroimages/fits/656nmos.fits\",\n    \"eagle-656nmos.fits\"\n);\nimg = AstroImage(\"eagle-656nmos.fits\");\nimview(img)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"We can adjust the color limits manually","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"imview(img, clims=(0,100))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Or provide a function to calculate them for us","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"imview(img, clims=extrema)","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"AstroImages includes some handy callables, like Percent and Zscale.flags Percent sets the limits to include some central percentage of the data range For example, 95% sets the color limits to clip the top and bottom 2.5% of pixels. Percent(99.5) is the default value of clims.","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"imview(img, clims=Percent(95))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"Arrays wrapped by AstroImage are displayed automatically using imview","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"AstroImage(randn(10,10))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"The settings for automatic imview are controlled using package defaults that can be adjusted to suit your tastes","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"AstroImages.set_clims!(Zscale()) # Display the full range automatically\nAstroImages.set_cmap!(:viridis)\nAstroImages.set_stretch!(asinhstretch)\nAstroImage(randn(10,10))","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"","category":"page"},{"location":"examples/basics/displaying/","page":"Displaying Images","title":"Displaying Images","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"load\nsave\nAstroImage\nAstroImageVec\nAstroImageMat\narraydata\nheader\nComment\nHistory\nwcs\npix_to_world\npix_to_world!\nworld_to_pix\nworld!_to_pix\nX\nY\nZ\nDim\nAt\nNear\nBetween\n..\ndims\nrefdims\nclampednormedview\nWCSGrid\nccd2rgb\ncomposechannels\nreset!\nzscale\npercent\nlogstretch\npowstretch\nsqrtstretch\nsquarestretch\nasinhstretch\nsinhstretch\npowerdiststretch\nimview\nimplot\ncopyheader\nshareheader\nImageCore.normedview","category":"page"},{"location":"api/#FileIO.load","page":"API","title":"FileIO.load","text":"load(filename) loads the contents of a formatted file, trying to infer the format from filename and/or magic bytes in the file (see query).\nload(strm) loads from an IOStream or similar object. In this case, there is no filename extension, so we rely on the magic bytes for format identification.\nload(File{format\"PNG\"}(filename)) specifies the format directly, and bypasses the format query.\nload(Stream{format\"PNG\"}(io)) specifies the format directly, and bypasses the format query.\nload(f; options...) passes keyword arguments on to the loader.\n\n\n\n\n\n","category":"function"},{"location":"api/#FileIO.save","page":"API","title":"FileIO.save","text":"save(filename, data...) saves the contents of a formatted file, trying to infer the format from filename.\nsave(Stream{format\"PNG\"}(io), data...) specifies the format directly, and bypasses the format query.\nsave(File{format\"PNG\"}(filename), data...) specifies the format directly, and bypasses the format query.\nsave(f, data...; options...) passes keyword arguments on to the saver.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.AstroImage","page":"API","title":"AstroImages.AstroImage","text":"Provides access to a FITS image along with its accompanying  header and WCS information, if applicable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.Comment","page":"API","title":"AstroImages.Comment","text":"Index for accessing a comment associated with a header keyword or COMMENT entry.\n\nExample:\n\nimg = AstroImage(randn(10,10))\nimg[\"ABC\"] = 1\nimg[\"ABC\", Comment] = \"A comment describing this key\"\n\npush!(img, Comment, \"The purpose of this file is to demonstrate comments\")\nimg[Comment] # [\"The purpose of this file is to demonstrate comments\")]\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.History","page":"API","title":"AstroImages.History","text":"Allows accessing and setting HISTORY header entries\n\nimg = AstroImage(randn(10,10)) push!(img, History, \"2023-04-19: Added history entry.\") img[History] # [\"2023-04-19: Added history entry.\"]\n\n\n\n\n\n","category":"type"},{"location":"api/#WCS.pix_to_world","page":"API","title":"WCS.pix_to_world","text":"pix_to_world(wcs, pixcoords)\n\nConvert the array of pixel coordinates pixcoords to world coordinates according to the WCSTransform wcs. pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same shape as pixcoords.\n\n\n\n\n\npix_to_world(img::AstroImage, pixcoords; all=false)\n\nGiven an astro image, look up the world coordinates of the pixels given  by pixcoords. World coordinates are resolved using WCS.jl and a WCSTransform calculated from any FITS header present in img. If no WCS information is in the header, or the axes are all linear, this will just return pixel coordinates.\n\npixcoords should be the coordinates in your current selection of the image. For example, if you select a slice like this:\n\njulia> cube = load(\"some-3d-cube.fits\")\njulia> slice = cube[10:20, 30:40, 5]\n\nThen to look up the coordinates of the pixel in the bottom left corner of slice, run:\n\njulia> world_coords = pix_to_world(img, [1, 1])\n[10, 30]\n\nIf WCS information was present in the header of cube, then those coordinates would be resolved using axis 1, 2, and 3 respectively.\n\nTo include world coordinates in all axes, pass all=true\n\njulia> world_coords = pix_to_world(img, [1, 1], all=true)\n[10, 30, 5]\n\n!! Coordinates must be provided in the order of dims(img). If you transpose  an image, the order you pass the coordinates should not change.\n\n\n\n\n\n","category":"function"},{"location":"api/#WCS.pix_to_world!","page":"API","title":"WCS.pix_to_world!","text":"pix_to_world!(wcs, pixcoords, worldcoords[; stat=, imcoords=, phi=, theta=])\n\nConvert the array of pixel coordinates pixcoords to world coordinates according to the WCSTransform wcs, storing the result in the worldcoords and stat arrays. pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates. worldcoords must be the same size and type as pixcoords.\n\nIf given, the arrays stat, imcoords, phi, theta will be used to store intermediate results. Their sizes and types must all match pixcoords, except for stat which should be the same size but of type Cint (typically Int32).\n\n\n\n\n\n","category":"function"},{"location":"api/#WCS.world_to_pix","page":"API","title":"WCS.world_to_pix","text":"world_to_pix(wcs, worldcoords)\n\nConvert the array of world coordinates worldcoords to pixel coordinates according to the WCSTransform wcs. worldcoords is a 2-d array where \"worldcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same size as worldcoords.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.X","page":"API","title":"DimensionalData.Dimensions.X","text":"X <: XDim\n\nX(val=:)\n\nX Dimension. X <: XDim <: IndependentDim\n\nExample:\n\nxdim = X(2:2:10)\n# Or\nval = A[X(1)]\n# Or\nmean(A; dims=X)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Y","page":"API","title":"DimensionalData.Dimensions.Y","text":"Y <: YDim\n\nY(val=:)\n\nY Dimension. Y <: YDim <: DependentDim\n\nExample:\n\nydim = Y(['a', 'b', 'c'])\n# Or\nval = A[Y(1)]\n# Or\nmean(A; dims=Y)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Z","page":"API","title":"DimensionalData.Dimensions.Z","text":"Z <: ZDim\n\nZ(val=:)\n\nZ Dimension. Z <: ZDim <: Dimension\n\nExample:\n\nzdim = Z(10:10:100)\n# Or\nval = A[Z(1)]\n# Or\nmean(A; dims=Z)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Dim","page":"API","title":"DimensionalData.Dimensions.Dim","text":"Dim{S}(val=:)\n\nA generic dimension. For use when custom dims are required when loading data from a file. Can be used as keyword arguments for indexing.\n\nDimension types take precedence over same named Dim types when indexing with symbols, or e.g. creating Tables.jl keys.\n\nusing DimensionalData\n\ndim = Dim{:custom}(['a', 'b', 'c'])\n\n# output\n\nDim{:custom} Char[a, b, c]\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.LookupArrays.At","page":"API","title":"DimensionalData.Dimensions.LookupArrays.At","text":"At <: Selector\n\nAt(x, atol, rtol)\nAt(x; atol=nothing, rtol=nothing)\n\nSelector that exactly matches the value on the passed-in dimensions, or throws an error. For ranges and arrays, every intermediate value must match an existing value - not just the end points.\n\nx can be any value or Vector of values.\n\natol and rtol are passed to isapprox. For Number rtol will be set to Base.rtoldefault, otherwise nothing, and wont be used.\n\nExample\n\nusing DimensionalData\n\nA = DimArray([1 2 3; 4 5 6], (X(10:10:20), Y(5:7)))\nA[X(At(20)), Y(At(6))]\n\n# output\n\n5\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.LookupArrays.Near","page":"API","title":"DimensionalData.Dimensions.LookupArrays.Near","text":"Near <: Selector\n\nNear(x)\n\nSelector that selects the nearest index to x.\n\nWith Points this is simply the index values nearest to the x, however with Intervals it is the interval center nearest to x. This will be offset from the index value for Start and End loci.\n\nExample\n\nusing DimensionalData\n\nA = DimArray([1 2 3; 4 5 6], (X(10:10:20), Y(5:7)))\nA[X(Near(23)), Y(Near(5.1))]\n\n# output\n4\n\n\n\n\n\n","category":"type"},{"location":"api/#IntervalSets.:..","page":"API","title":"IntervalSets.:..","text":"iv = l..r\n\nConstruct a ClosedInterval iv spanning the region from l to r.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.dims","page":"API","title":"DimensionalData.Dimensions.dims","text":"dims(x, [dims::Tuple]) => Tuple{Vararg{<:Dimension}}\ndims(x, dim) => Dimension\n\nReturn a tuple of Dimensions for an object, in the order that matches the axes or columns of the underlying data.\n\ndims can be Dimension, Dimension types, or Symbols for Dim{Symbol}.\n\nThe default is to return nothing.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.refdims","page":"API","title":"DimensionalData.Dimensions.refdims","text":"refdims(x, [dims::Tuple]) => Tuple{Vararg{<:Dimension}}\nrefdims(x, dim) => Dimension\n\nReference dimensions for an array that is a slice or view of another array with more dimensions.\n\nslicedims(a, dims) returns a tuple containing the current new dimensions and the new reference dimensions. Refdims can be stored in a field or disgarded, as it is mostly to give context to plots. Ignoring refdims will simply leave some captions empty.\n\nThe default is to return an empty Tuple ().\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.WCSGrid","page":"API","title":"AstroImages.WCSGrid","text":"WCSGrid(img::AstroImageMat, ax=(1,2), coords=(first(axes(img,ax[1])),first(axes(img,ax[2]))))\n\nGiven an AstroImageMat, return information necessary to plot WCS gridlines in physical coordinates against the image's pixel coordinates. This function has to work on both plotted axes at once to handle rotation and general curvature of the WCS grid projected on the image coordinates.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.sqrtstretch","page":"API","title":"AstroImages.sqrtstretch","text":"sqrt(x)\n\nReturn sqrtx. Throws DomainError for negative Real arguments. Use complex negative arguments instead. The prefix operator √ is equivalent to sqrt.\n\nSee also: hypot.\n\nExamples\n\njulia> sqrt(big(81))\n9.0\n\njulia> sqrt(big(-81))\nERROR: DomainError with -81.0:\nNaN result for non-NaN input.\nStacktrace:\n [1] sqrt(::BigFloat) at ./mpfr.jl:501\n[...]\n\njulia> sqrt(big(complex(-81)))\n0.0 + 9.0im\n\njulia> .√(1:4)\n4-element Vector{Float64}:\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n\n\n\n\n\nsqrt(A::AbstractMatrix)\n\nIf A has no negative real eigenvalues, compute the principal matrix square root of A, that is the unique matrix X with eigenvalues having positive real part such that X^2 = A. Otherwise, a nonprincipal square root is returned.\n\nIf A is real-symmetric or Hermitian, its eigendecomposition (eigen) is used to compute the square root.   For such matrices, eigenvalues λ that appear to be slightly negative due to roundoff errors are treated as if they were zero More precisely, matrices with all eigenvalues ≥ -rtol*(max |λ|) are treated as semidefinite (yielding a Hermitian square root), with negative eigenvalues taken to be zero. rtol is a keyword argument to sqrt (in the Hermitian/real-symmetric case only) that defaults to machine precision scaled by size(A,1).\n\nOtherwise, the square root is determined by means of the Björck-Hammarling method [BH83], which computes the complex Schur form (schur) and then the complex square root of the triangular factor. If a real square root exists, then an extension of this method [H87] that computes the real Schur form and then the real square root of the quasi-triangular factor is instead used.\n\n[BH83]: Åke Björck and Sven Hammarling, \"A Schur method for the square root of a matrix\", Linear Algebra and its Applications, 52-53, 1983, 127-140. doi:10.1016/0024-3795(83)80010-X\n\n[H87]: Nicholas J. Higham, \"Computing real square roots of a real matrix\", Linear Algebra and its Applications, 88-89, 1987, 405-430. doi:10.1016/0024-3795(87)90118-2\n\nExamples\n\njulia> A = [4 0; 0 4]\n2×2 Matrix{Int64}:\n 4  0\n 0  4\n\njulia> sqrt(A)\n2×2 Matrix{Float64}:\n 2.0  0.0\n 0.0  2.0\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.imview","page":"API","title":"AstroImages.imview","text":"imview(img; clims=Percent(99.5), stretch=identity, cmap=:magma, contrast=1.0, bias=0.5)\n\nCreate a read only view of an array or AstroImageMat mapping its data values to Colors according to clims, stretch, and cmap.\n\nThe data is first clamped to clims, which can either be a tuple of (min, max) values or a function accepting an iterator of pixel values that returns (min, max). By default, clims=extrema i.e. the minimum and maximum of img. Convenient functions to use for clims are: extrema, zscale, and percent(p)\n\nNext, the data is rescaled to [0,1] and remapped according to the function stretch. Stretch can be any monotonic fuction mapping values in the range [0,1] to some range [a,b]. Note that log(0) is not defined so is not directly supported. For a list of convenient stretch functions, see: logstretch, powstretch, squarestretch, asinhstretch, sinhstretch, powerdiststretch\n\nFinally the data is mapped to RGB values according to cmap. If cmap is nothing, grayscale is used. ColorSchemes.jl defines hundreds of colormaps. A few nice ones for images include: :viridis, :magma, :plasma, :thermal, and :turbo.\n\nCrucially, this function returns a view over the underlying data. If img is updated then those changes will be reflected by this view with the exception of clims which is not recalculated.\n\nNote: if clims or stretch is a function, the pixel values passed in are first filtered to remove non-finite or missing values.\n\nDefaults\n\nThe default values of clims, stretch, and cmap are extrema, identity, and nothing respectively. You may alter these defaults using AstroImages.set_clims!,  AstroImages.set_stretch!, and AstroImages.set_cmap!.\n\nAutomatic Display\n\nArrays wrapped by AstroImageMat() get displayed as images automatically by calling  imview on them with the default settings when using displays that support showing PNG images.\n\nMissing data\n\nPixels that are NaN or missing will be displayed as transparent when cmap is set or black if. +/- Inf will be displayed as black or white respectively.\n\nExporting Images\n\nThe view returned by imview can be saved using general FileIO.save methods. Example:\n\nv = imview(data, cmap=:magma, stretch=asinhstretch, clims=percent(95))\nsave(\"output.png\", v)\n\n\n\n\n\nimview(img::AbstractArray{<:Complex}; ...)\n\nWhen applied to an image with complex values, display the magnitude of the pixels using imview and display the phase angle as a panel below using a cyclical color map. For more customatization, you can create a view like this yourself:\n\nvcat(\n    imview(abs.(img)),\n    imview(angle.(img)),\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.implot","page":"API","title":"AstroImages.implot","text":"implot(\n    img::AbstractArray;\n    clims=Percent(99.5),\n    stretch=identity,\n    cmap=:magma,\n    bias=0.5,\n    contrast=1,\n    wcsticks=true,\n    grid=true,\n    platescale=1\n)\n\nCreate a read only view of an array or AstroImageMat mapping its data values to an array of Colors. Equivalent to:\n\nimplot(\n    imview(\n        img::AbstractArray;\n        clims=Percent(99.5),\n        stretch=identity,\n        cmap=:magma,\n        bias=0.5,\n        contrast=1,\n    ),\n    wcsn=1,\n    wcsticks=true,\n    wcstitle=true,\n    grid=true,\n    platescale=1\n)\n\nImage Rendering\n\nSee imview for how data is mapped to RGBA pixel values.\n\nWCS & Image Coordinates\n\nIf provided with an AstroImage that has WCS headers set, the tick marks and plot grid are calculated using WCS.jl. By default, use the first WCS coordinate system. The underlying pixel coordinates are those returned by dims(img) multiplied by platescale. This allows you to overplot lines, regions, etc. using pixel coordinates. If you wish to compute the pixel coordinate of a point in world coordinates, see world_to_pix.\n\nwcsn (default 1) select which WCS transform in the headers to use for ticks & grid\nwcsticks (default true if WCS headers present) display ticks and labels, and title using world coordinates\nwcstitle (default true if WCS headers present and length(refdims(img))>0). When slicing a cube, display the location along unseen axes in world coordinates instead of pixel coordinates.\ngrid (default true) show a grid over the plot. Uses WCS coordinates if wcsticks is true, otherwise pixel coordinates multiplied by platescale.\nplatescale (default 1). Scales the underlying pixel coordinates to ease overplotting, etc. If wcsticks is false, the displayed pixel coordinates are also scaled.\n\nDefaults\n\nThe default values of clims, stretch, and cmap are extrema, identity, and nothing respectively. You may alter these defaults using AstroImages.set_clims!,  AstroImages.set_stretch!, and AstroImages.set_cmap!.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.copyheader","page":"API","title":"AstroImages.copyheader","text":"copyheader(img::AstroImage, data) -> imgnew\n\nCreate a new image copying the header of img but using the data of the AbstractArray data. Note that changing the header of imgnew does not affect the header of img. See also: shareheader.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.shareheader","page":"API","title":"AstroImages.shareheader","text":"shareheader(img::AstroImage, data) -> imgnew\n\nCreate a new image reusing the header dictionary of img but using the data of the AbstractArray data. The two images have synchronized header; modifying one also affects the other. See also: copyheader.\n\n\n\n\n\n","category":"function"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To get started, you will first need to install AstroImages. After starting Julia, enter package-mode by typing ] and then","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add AstroImages","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To display images and save them in traditional graphics formats like PNG, JPG, GIF, etc., you will also need to add the ImageIO package. Once installed, this package doesn't need to be loaded explicitly.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"For some of the more advanced visualizations you may also want Plots:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add Plots","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To load the package, run:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using AstroImages\n# And if desired:\nusing Plots","category":"page"},{"location":"examples/basics/loading/#Loading-Images","page":"Loading Images","title":"Loading Images","text":"","category":"section"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"(Image: Source code) (Image: notebook) (Image: Author)","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"We'll start by downloading a sample image. If you have an image stored locally, you would skip this step.","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"using AstroImages\nfname = download(\n    \"http://www.astro.uvic.ca/~wthompson/astroimages/fits/656nmos.fits\",\n    \"eagle-656nmos.fits\"\n);\nnothing #hide","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"Load the image by filename. If unspecified, the image is loaded from the first image-HDU in the fits file.","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"img = AstroImage(\"eagle-656nmos.fits\")","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"","category":"page"},{"location":"examples/basics/loading/","page":"Loading Images","title":"Loading Images","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"basics/","page":"-","title":"-","text":"The AstroImages package provides a wrapper, AstroImage, that can wrap any AbstractArray. An AstroImage should behave like a plain array, but gains a few extra abilities.","category":"page"},{"location":"basics/","page":"-","title":"-","text":"First, AstroImages are automatically displayed when returned as results in many environements, including VSCode, Jupyter, Pluto, ImageShow, and ImageInTerminal","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basics","page":"Examples","title":"Basics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td valign=\"bottom\"><div class=\"list-card-cover\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: list-card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"  </div></td>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Displaying Images","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We'll start by downloading a sample image. If you have an image stored locally, you would skip this step.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td valign=\"bottom\"><div class=\"list-card-cover\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: list-card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"  </div></td>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Loading Images","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Loading FITS images from files.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AstroImages.jl is a Julia package for loading, manipulating, visualizing, and saving astronomical images.","category":"page"}]
}
